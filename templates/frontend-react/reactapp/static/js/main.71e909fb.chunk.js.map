{"version":3,"sources":["assets/beer-icon.png","components/Header.js","components/BeerContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","onClick","this","props","onChangeBeerClick","Component","BeerContainer","beer","name","description","abv","producerLocation","App","state","token","getToken","context","Object","assertThisInitialized","_this","axios","get","auth","username","password","then","response","setState","data","getRandomBeer","length","config","headers","Authorization","componentDidMount","components_Header","src","beerIcon","alt","components_BeerContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8SCgBzBC,0LAXX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,0BACAH,EAAAC,EAAAC,cAAA,UAAQE,QAASC,KAAKC,MAAMC,mBAA5B,6BALaC,cCqBNC,0LApBJ,IACCC,EAASL,KAAKC,MAAdI,KACR,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAKQ,EAAKC,OAEZX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeO,EAAKE,aACjCZ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOO,EAAKG,KACzBb,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAqBO,EAAKI,2BAdrBN,8BC4EbO,oNAvEbC,MAAQ,CACNC,MAAO,GACPP,KAAM,CACJC,KAAM,GACNC,YAAa,GACbC,IAAK,GACLC,iBAAkB,OAItBI,SAAW,WACT,IAMIC,EAAOC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAE,IACX,OAAOC,IACJC,IAAI,iCARM,CACXC,KAAM,CACJC,SAAU,UACVC,SAAU,YAMXC,KAAK,SAASC,GACbV,EAAQW,SAAS,CAAEb,MAAOY,EAASE,KAAKA,KAAKd,aAInDe,cAAgB,WACd,IAAIb,EAAOC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAE,IACX,IAAKA,EAAKN,MAAMC,MAAMgB,OAIpB,OAHAX,EAAKJ,WAAWU,KAAK,WACnBT,EAAQa,mBAEH,EAET,IAAIE,EAAS,CACXC,QAAS,CAAEC,cAAe,UAAYd,EAAKN,MAAMC,QAEnDM,IACGC,IAAI,kCAAmCU,GACvCN,KAAK,SAASC,GACbV,EAAQW,SAAS,CACfpB,KAAM,CACJC,KAAMkB,EAASE,KAAKA,KAAKpB,KACzBC,YAAaiB,EAASE,KAAKA,KAAKnB,YAChCC,IAAKgB,EAASE,KAAKA,KAAKlB,IACxBC,iBAAkBe,EAASE,KAAKA,KAAKjB,yBAM/CuB,kBAAoB,WAClBf,EAAKU,yFAIL,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,CAAQ/B,kBAAmBF,KAAK2B,gBAChChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKqC,IAAKC,IAAUC,IAAI,eAE1BzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACwC,EAAD,CAAehC,KAAML,KAAKW,MAAMN,iBAhE1BF,cCGEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.71e909fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beer-icon.a18759f5.png\";","import React, { Component } from \"react\";\nimport \"./styles/Header.css\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">React Random Beer App!</h1>\n        <button onClick={this.props.onChangeBeerClick}>\n          Show another beer\n        </button>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./styles/BeerContainer.css\";\n\nclass BeerContainer extends Component {\n  render() {\n    const { beer } = this.props;\n    return (\n      <div className=\"beer-data\">\n        <div className=\"beer-name\">\n          <h2>{beer.name}</h2>\n        </div>\n        <div className=\"beer-details\">\n          <label>Description:</label>\n          <p className=\"description\">{beer.description}</p>\n          <label>Abv:</label>\n          <p className=\"abv\">{beer.abv}</p>\n          <label>Producer Location:</label>\n          <p className=\"producer-location\">{beer.producerLocation}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BeerContainer;\n","import React, { Component } from \"react\";\nimport beerIcon from \"./assets/beer-icon.png\";\nimport Header from \"./components/Header\";\nimport BeerContainer from \"./components/BeerContainer\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    token: \"\",\n    beer: {\n      name: \"\",\n      description: \"\",\n      abv: \"\",\n      producerLocation: \"\"\n    }\n  };\n\n  getToken = () => {\n    var config = {\n      auth: {\n        username: \"apiuser\",\n        password: \"apipwd\"\n      }\n    };\n    var context = this;\n    return axios\n      .get(\"http://localhost/v1/auth/token\", config)\n      .then(function(response) {\n        context.setState({ token: response.data.data.token });\n      });\n  };\n\n  getRandomBeer = () => {\n    var context = this;\n    if (!this.state.token.length) {\n      this.getToken().then(() => {\n        context.getRandomBeer();\n      });\n      return false;\n    }\n    var config = {\n      headers: { Authorization: \"Bearer \" + this.state.token }\n    };\n    axios\n      .get(\"http://localhost/v1/beer/random\", config)\n      .then(function(response) {\n        context.setState({\n          beer: {\n            name: response.data.data.name,\n            description: response.data.data.description,\n            abv: response.data.data.abv,\n            producerLocation: response.data.data.producerLocation\n          }\n        });\n      });\n  };\n\n  componentDidMount = () => {\n    this.getRandomBeer();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header onChangeBeerClick={this.getRandomBeer} />\n        <div className=\"App-body\">\n          <div className=\"left-container\">\n            <img src={beerIcon} alt=\"Beer Icon\" />\n          </div>\n          <div className=\"right-container\">\n            <BeerContainer beer={this.state.beer} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}